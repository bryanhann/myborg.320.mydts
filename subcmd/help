#!/bin/sh

#d# Supply help on subcommands

usage () { cat << EOF
USAGE:
    $PROG $SUB      : supply help on subcommands
EOF
}
SUB=$(basename $0)
[ "$1" = "-h" ] && usage && exit
[ "$1" = "--help" ] && usage && exit

doc4cmd () {
    cmd=${SUBS}/${1}
    while IFS= read -r line;
        do
            aa=$( echo "$line" | cut -c -3 )
            bb=$( echo "$line" | cut -c 5- )
            [ ! "${aa}" = '#d#' ] && continue
            [ $2. = --oneline. ] && echo ${bb} && break
            echo "        ${bb}"
        done < ${cmd}
}

general () { 
cat << GENERAL
USAGE:
        $PROG [-f] SUBCOMMAND [<options>] [<args>]

OPTIONS:
        There is one global option [-f] which forces a refreshening
        of the dir cache before executing the subcommand.

        Traversing the filesystem to find tagged directories is costly,
        so it is traversed once only and the results are cached for later
        use.  When searching for tags in realtime on ephemeral media the
        cache may be too stale for purposes at hand. In such cases the
        client should use the [-f] option.

SUBCOMMANDS:
GENERAL

    for cmd in $(/bin/ls ${SUBS}); do
        printf "       "
        printf '%-10s' "${cmd} "
        printf "$(doc4cmd $cmd --oneline)\n"
    done
echo
echo "Try [$PROG SUBCOMMAND -h] for help on a particular subcommand."
}

special () {
    cmd=$1
    [ ! -f ${SUBS}/${cmd} ] && {
      echo "not a subcommand: [${cmd}]"
      exit
    }
    $PROG ${cmd} -h
    return
}


[ -z "$1" ] && general || special $1
